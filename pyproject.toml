[tool.poetry]
name = "jinja-comprehensions"
version = "0.1.1"
description = "Jinja2 environment supporting Python comprehensions"
authors = ["Zach Kanzler <zach@rewst.io>"]
repository = "https://github.com/RewstApp/jinja-comprehensions"
homepage = "https://github.com/RewstApp/jinja-comprehensions"
license = "MIT"
readme = "README.md"
packages = [
  { include = "jinja_comprehensions" },
  { include = "tests", format = "sdist" },
  { include = "pyproject.toml", format = "sdist" },
  { include = "LICENSE", format = "sdist" },
  { include = "CHANGELOG.md", format = "sdist" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Text Processing :: Markup :: HTML",
]


[tool.poetry.dependencies]
python = "^3.9"
Jinja2 = ">=3.0.0"
asyncstdlib = "^3.10.8"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.2"
tox = "^4.6.2"
pytest-asyncio = "^0.21.0"
pytest-lambda = "^2.2.0"

[tool.pytest.ini_options]
# Running "pytest" without specifying paths will use these as defaults
testpaths = ["tests"]

# Directories that are not visited by pytest collector:
norecursedirs = "*.egg .eggs dist build docs .tox .git __pycache__ .mypy_cache .pytest_cache"

# Only search for tests within files matching these patterns
python_files = [
    "tests.py",
    "test_*.py",
]

# Discover tests within classes matching these patterns
python_classes = [
    "Test*",
    "Case*",
    "Context*",
    "Describe*",
]

# Only methods matching these patterns are considered tests
python_functions = [
    "test_*",
    "it_*",
    "its_*",
]

# Extra options:
addopts = [
    # Verbosity
    #  0 - hide test names while running (only showing ".", "F", etc)
    #  1 - show full test names while running
    #  2 - don't truncate assertion failure printouts (includes full diffs)
    "--verbosity=2",

    # Show an abbreviated traceback format
    "--tb=short",
]

# https://pytest-asyncio.readthedocs.io/en/latest/concepts.html#test-discovery-modes
asyncio_mode = "strict"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
